require 'html-proofer'
require 'find'
require "icalendar"

# default task
desc "default task to run then no task is specified to rake"
task :default => [:check_install, :tasks]

#
# task groups
#

desc "group of tasks to run in CI environments"
task :ci => [:check_install, :check_internal_urls, :check_api, :check_jsonp, :check_ics]

#
# task definitions
#

desc "show rake tasks"
task :tasks do
  sh "rake -AT"
end

desc "remove _site dir and its contents"
task :cleanup do
  sh "rm -rf _site"
end

desc "live website server with livereload, drafts, and future posts"
task :serve do
  sh "bundle exec jekyll serve --livereload --future --drafts"
end

desc "remove _site dir, then build website"
task :build => :cleanup do
  sh "bundle exec jekyll build"
end

desc "remove _site dir, then build website (include drafts and future posts)"
task :build_all => :cleanup do
  sh "bundle exec jekyll build --future --drafts"
end

desc "list tags, categories, etc (Eg `rake list[tags]` or `rake list[tags, json]`)"
task :list, [:what, :format] do |t, args|
  what = args[:what]
  format = args[:format] || "csv"
  sh "bundle exec jekyll list #{what} --output #{format}"
end

desc "run jekyll doctor"
task :check_install do
  sh "bundle exec jekyll doctor"
end

check_urls_options = {
  :allow_hash_href => true,
  :allow_missing_href => true,
  :ignore_empty_alt => true,
  :ignore_missing_alt => true,
  :assume_extension => '.html',
  :checks => ['Links', 'Images', 'Scripts'],
  :check_external_hash => true,
  :check_internal_hash => true,
  :directory_index_file => 'index.html',
  :enforce_https => true,
  :ignore_empty_mailto => true,  # because of sharing-buttons.html
  :ignore_files => [
    # skip very old blog posts
    %r{^_site\/blog\/201\d{1}\/.*\/index.html$},
    # version may point to something not yet pushed, failing the check
    "_site/version/index.html",
  ],
  :ignore_urls => [
    %r{^https://matrix.to/.*$},
  ],
  :ignore_status_codes => [
    401,
    403,
    999
  ],
  :only_4xx => false,
  :hydra => {
    :max_concurrency => 50
  },
  :typhoeus => {
    :headers => {
      "User-Agent" => "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
    },
    :followlocation => true,
    :connecttimeout => 10,
    :timeout => 30,
    :ssl_verifyhost => 2,
    :ssl_verifypeer => true
  },
  :cache => {
    :timeframe => {
      :external => "2w",
      :internal => "1d"
    },
    :storage_dir => ".html_proofer_cache",
    :cache_file => "cache.json"
  }
}

desc "check href attributes in generated website for broken links (all)"
task :check_urls => :build do
  options = check_urls_options
  options[:disable_external] = false
  HTMLProofer.check_directory('_site/', options).run
end

desc "check href attributes in generated website for broken links (internal links only)"
task :check_internal_urls => :build do
  options = check_urls_options
  options[:disable_external] = true
  HTMLProofer.check_directory('_site/', options).run
end

def get_files(label, files_path, regex)
  results = []
  puts "\n\nChecking #{label} files in '#{files_path}' for valid content\n\n"
  Find.find(files_path) do |path|
    if path =~ regex
      puts "Found #{label} file: #{path}"
      results << path
    end
  end
  puts "\nFound #{results.length} #{label} file#{results.length > 1 ? 's' : ''}\n\n"
  results
end

def process_files(files, callback)
  onError = 0
  files.each do |file|
    raw_content = File.read(file)
    begin
      send(callback, raw_content)
    rescue JSON::ParserError => e
      onError += 1
      puts "Invalid JSON content in file: #{file}"
      puts "#{e.message}\n\n"
    rescue StandardError => e
      onError += 1
      puts "Error processing file: #{file}"
      puts "#{e.message}\n\n"
    end
  end
  puts "\nFinished: Found #{onError} files with invalid content\n\n"
  onError
end

def process_API_file(content)
  JSON.parse(content)
end

def process_JSONP_file(content)
  json_content = content[content.index('[')..content.rindex(']')]
  JSON.parse(json_content)
end

def process_ICS_file(content)
  content.index('BEGIN:VCALENDAR') or raise "Missing BEGIN:VCALENDAR"
  content.index('END:VCALENDAR') or raise "Missing END:VCALENDAR"
  read_calendar(content)
end

def read_calendar(input)
    #calendar_file = File.open(calendar_filename)
    #events = Icalendar::Event.parse(calendar_file)
    events = Icalendar::Event.parse(input)

    hash = {}
    counter = 0

    # loop through the events in the calendars
    # and map the values you want into a variable and then return it:

    events.each do |event|
      hash[counter] = {
        "summary" => event.summary,
        "dtstart" => event.dtstart,
        "dtend" => event.dtend,
        "description" => event.description
      }

      counter += 1
    end

    return hash
end

desc "check static JSON files providing APIs to be valid"
task :check_api => :build do
  api_path = "_site/api"
  regex = /index\.json$/
  api_files = get_files("API", api_path, regex)
  onError = process_files(api_files, :process_API_file)
  exit 1 if onError > 0
end

desc "check static JSONP files providing website metadata to be valid"
task :check_jsonp => :build do
  jsonp_path = "_site/jsonp"
  regex = /\.jsonp$/
  jsonp_files = get_files("JSONP", jsonp_path, regex)
  onError = process_files(jsonp_files, :process_JSONP_file)
  exit 1 if onError > 0
end

desc "check static ICS files providing calendars to be valid"
task :check_ics => :build do
  ics_path = "_site/calendars"
  regex = /\.ics$/
  ics_files = get_files("ICS", ics_path, regex)
  onError = process_files(ics_files, :process_ICS_file)
  exit 1 if onError > 0
end

desc "build a general purpose Jekyll Docker image to run the website"
task :build_docker_image do
  sh "docker build -t pirafrank/jekyll -f Dockerfile ."
end

def generate_website()
  require 'jekyll'

  # Set up Jekyll configuration
  config = Jekyll.configuration({
    'source' => '.', # Assumes the task is run from the root of your Jekyll project
    'destination' => '_site',
    'show_drafts' => true,
    'serving' => false
  })

  # Create the site object
  site = Jekyll::Site.new(config)

  # Process the site to gather categories
  site.reset
  site.read
  site
end

def get_categories(site)
  categories = site.categories.keys
  categories.sort
end

def get_tags(site)
  tags = site.tags.keys
  tags.sort
end

def format_list_as_yaml(items)
  formatted = items.sort.map { |i| "\"#{i}\"" }.join(", ")
  "[#{formatted}]"
end

def create_new(item_type)
  site = generate_website()
  categories = site.categories.keys
  tags = site.tags.keys

  date = Time.now
  day = date.strftime('%Y-%m-%d').to_s

  puts "Please enter a title for the #{item_type}:\n"
  title = STDIN.gets.chomp

  formatted_title = title.downcase.split(" ").join("-")
  filename = "#{day}-#{formatted_title}.md"
  contents = <<-STR
---
title: "#{title}"
date: #{day}
subtitle: Some subtitle
description: Write here a longer description about the blog post.
category: #{format_list_as_yaml(categories)}
tags: #{format_list_as_yaml(tags)}
seoimage: "300x/some-seo-pic.jpg"
---

![image description]({{ site.baseurl }}/static/postimages/300x/some-pic.jpg)

{% include image.html
url="/static/postimages/2020-06-08/office.jpg"
desc="Image by Markus Spiske from Pixabay"
alt="An office with a desk and a computer mouse"
link="https://somehost.local/some/article"
credits="https://pixabay.com/users/markusspiske-670330/"
%}

{% gist 40880dbc3e2dcfbdc1dd817b8880fa66 %}

{% youtube abc123abc123 %}

{% vimeo abc123abc123 %}

{% ted abc123abc123 %}

[some text for relative link]({% post_url 2016-09-13-my-jekyll-workflow-part1 %})

{% link static/postfiles/my-jekyll-workflow-part3/policy.txt %}

[Some external link]({{ site.data.external.awesomelink }}){:target="_blank"}{:rel="noopener noreferrer"}

Here goes the blog post text...

I hope it helps. Thanks for reading.

---
  STR

  File.open("_#{item_type}s/#{filename}", "w") do |f|
    f.write(contents)
  end
  puts "New post generated"
end

desc "create a new blog post from template"
task :new_post do
  create_new("post")
end

desc "create a new blog draft from template"
task :new_draft do
  create_new("draft")
end

desc "Show size of all post images"
task :post_image_size do
  sh 'find static/postimages -type f \( -iname "*.jpeg" -o -iname "*.jpg" -o -iname "*.png" \) -exec identify -format "%[fx:w]x%[fx:h] %[f]\n" {} \; | awk \'{print $2, $1}\''
end

desc "Check the oldest GLIBC version required by nokogiri"
task :nokogiri do
  sh "objdump -T $(find $(dirname $(gem which nokogiri)) -type f -iname '*.so' | grep /nokogiri/$(ruby -v | cut -d ' ' -f2 | cut -d'.' -f1,2)) | grep GLIBC_ | sort -V | tail -n1"
end
